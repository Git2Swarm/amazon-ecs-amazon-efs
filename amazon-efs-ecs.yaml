AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-4aab5d2b
    ap-southeast-1:
      AMIID: ami-24c71547
    ap-southeast-2:
      AMIID: ami-0bf2da68
    eu-central-1:
      AMIID: ami-4a5eb625
    eu-west-1:
      AMIID: ami-ccd942bf
    us-east-1:
      AMIID: ami-a88a46c5
    us-west-1:
      AMIID: ami-34a7e354
    us-west-2:
      AMIID: ami-ae0acdce
Outputs:
  FileSystemID:
    Description: File system ID
    Value:
      Ref: FileSystem
  MountTargetID:
    Description: Mount target ID
    Value:
      Ref: MountTarget
  ecscluster:
    Value:
      Ref: ECSCluster
  ecsservice:
    Value:
      Ref: service
Parameters:
  AsgMaxSize:
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster
    Type: Number
  CIDRSubnet1:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.10.1.0/24
    Description: Enter the CIDR Range for your VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  CIDRSubnet2:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.10.2.0/24
    Description: Enter the CIDR Range for your VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  CIDRVPC:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 10.10.0.0/16
    Description: Enter the CIDR Range for your VPC
    MaxLength: '18'
    MinLength: '9'
    Type: String
  DesiredCapacity:
    Default: '1'
    Description: Number of instances to launch in your ECS cluster
    Type: Number
  EFSNameTag:
    Default: myEFSvolume
    Description: The name of the EFS volume
    MinLength: '1'
    Type: String
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: The EC2 instance type
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    MaxLength: '18'
    MinLength: '9'
    Type: String
Resources:
  ContainerInstances:
    Metadata:
      AWS::CloudFormation::Designer:
        id: d86a3e51-ef74-4f2a-9591-8c547b7bee6c
      AWS::CloudFormation::Init:
        Install:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource ContainerInstances '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
                  - 'runas=root

                    '
          packages:
            yum:
              nfs-utils: []
              python27: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        configSets:
          Install:
          - Install
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash

              '
            - echo ECS_CLUSTER=
            - Ref: ECSCluster
            - ' >> /etc/ecs/ecs.config

              '
            - 'yum install -y aws-cfn-bootstrap

              '
            - /opt/aws/bin/cfn-init
            - '         --stack '
            - Ref: AWS::StackName
            - ' '
            - '         --resource ContainerInstances '
            - '         --configsets Install '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
            - 'PATH=$PATH:/usr/local/bin

              '
            - 'yum update

              '
            - 'EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`

              '
            - EC2_REGION=
            - Ref: AWS::Region
            - '

              '
            - 'mkdir /mnt/efs

              '
            - EFS_FILE_SYSTEM_ID=
            - Ref: FileSystem
            - '

              '
            - 'DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com

              '
            - 'DIR_TGT=/mnt/efs

              '
            - 'touch /home/ec2-user/echo.res

              '
            - 'echo $EFS_FILE_SYSTEM_ID >> /home/ec2-user/echo.res

              '
            - 'echo $EC2_AVAIL_ZONE >> /home/ec2-user/echo.res

              '
            - 'echo $EC2_REGION >> /home/ec2-user/echo.res

              '
            - 'echo $DIR_SRC >> /home/ec2-user/echo.res

              '
            - 'echo $DIR_TGT >> /home/ec2-user/echo.res

              '
            - 'mount -t nfs4 $DIR_SRC:/ $DIR_TGT >> /home/ec2-user/echo.res

              '
            - 'cp -p /etc/fstab /etc/fstab.back-$(date +%F)

              '
            - "echo -e \"$DIR_SRC:/ \t\t $DIR_TGT \t\t nfs \t\t defaults \t\t 0 \t\
              \t 0\" | tee -a /etc/fstab\n"
            - 'docker ps

              '
            - 'service docker stop

              '
            - 'service docker start

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackName
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  EC2InstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: EC2Role
    Type: AWS::IAM::InstanceProfile
  EC2Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
    Type: AWS::IAM::Role
  ECSAutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DependsOn:
    - MountTarget
    - MountTarget2
    Properties:
      AvailabilityZones:
      - Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      - Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      DesiredCapacity:
        Ref: DesiredCapacity
      LaunchConfigurationName:
        Ref: ContainerInstances
      MaxSize:
        Ref: AsgMaxSize
      MinSize: '1'
      VPCZoneIdentifier:
      - Ref: Subnet1
      - Ref: Subnet2
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  ECSCluster:
    Metadata:
      AWS::CloudFormation::Designer:
        id: 14de148d-c95d-4f5f-bcf7-6e123d54844b
    Type: AWS::ECS::Cluster
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service
    Type: AWS::IAM::Role
  EcsElasticLoadBalancer:
    Properties:
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: TCP:3306
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '3306'
        LoadBalancerPort: '3306'
        Protocol: TCP
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  FileSystem:
    Properties:
      FileSystemTags:
      - Key: Name
        Value:
          Ref: EFSNameTag
    Type: AWS::EFS::FileSystem
  GatewayToInternet:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '3306'
        IpProtocol: tcp
        ToPort: '3306'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
    Type: AWS::EC2::InternetGateway
  MountTarget:
    Properties:
      FileSystemId:
        Ref: FileSystem
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
      SubnetId:
        Ref: Subnet1
    Type: AWS::EFS::MountTarget
  MountTarget2:
    Properties:
      FileSystemId:
        Ref: FileSystem
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
      SubnetId:
        Ref: Subnet2
    Type: AWS::EFS::MountTarget
  MountTargetSecurityGroup:
    Properties:
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - CidrIp:
          Ref: CIDRVPC
        FromPort: '2049'
        IpProtocol: tcp
        ToPort: '2049'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  PublicRoute:
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    DependsOn:
    - VPC
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PublicSubnetRouteTableAssociation:
    DependsOn:
    - Subnet1
    - PublicRouteTable
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: Subnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetRouteTableAssociation2:
    DependsOn:
    - Subnet2
    - PublicRouteTable
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: Subnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRSubnet1
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  Subnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRSubnet2
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  VPC:
    Properties:
      CidrBlock:
        Ref: CIDRVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: EFS-ECS Demo VPC
    Type: AWS::EC2::VPC
  service:
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: efsdemo
        ContainerPort: '3306'
        LoadBalancerName:
          Ref: EcsElasticLoadBalancer
      Role:
        Ref: ECSServiceRole
      TaskDefinition:
        Ref: taskdefinition
    Type: AWS::ECS::Service
  taskdefinition:
    Properties:
      ContainerDefinitions:
      - Cpu: '10'
        Environment:
        - Name: MYSQL_ROOT_PASSWORD
          Value: password
        Essential: 'true'
        Image: mysql
        Memory: '500'
        MountPoints:
        - ContainerPath: /var/lib/mysql
          SourceVolume: my-efs
        Name: efsdemo
        PortMappings:
        - ContainerPort: 3306
          HostPort: 3306
      Volumes:
      - Host:
          SourcePath: /mnt/efs/mysql
        Name: my-efs
    Type: AWS::ECS::TaskDefinition
